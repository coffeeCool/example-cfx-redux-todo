// Generated by CoffeeScript 1.10.0
var ADD_TODO_STATE, LOAD_TODO_STATE, MODIFY_TODO_STATE, REMOVE_TODO_STATE, SI, assign, constants, handleAction, handleActions, initial, initialState, mergeReduce, normalizerTodos, reduxActions, ref, ref1, todoApp, todos;

assign = Object.assign;

reduxActions = require('cfx.redux-actions').reduxActions;

handleAction = reduxActions.handleAction, handleActions = reduxActions.handleActions;

SI = require('cfx.seamless-immutable');

mergeReduce = require('cfx.redux').mergeReduce;

constants = require('../constants/index');

ref = constants.types, LOAD_TODO_STATE = ref.LOAD_TODO_STATE, ADD_TODO_STATE = ref.ADD_TODO_STATE, MODIFY_TODO_STATE = ref.MODIFY_TODO_STATE, REMOVE_TODO_STATE = ref.REMOVE_TODO_STATE;

ref1 = require('../initials/index'), initial = ref1.initial, initialState = ref1.initialState;

normalizerTodos = (require('../initials/index')).normalizer.todos;

todos = handleActions({
  LOAD_TODO_STATE: function(state, action) {
    return action.payload.todos;
  },
  ADD_TODO_STATE: function(state, action) {
    var todo;
    todo = action.payload.todo;
    return SI.Array.push(state, [todo]);
  },
  MODIFY_TODO_STATE: function(state, action) {
    var index, ref2, todo;
    ref2 = action.payload, index = ref2.index, todo = ref2.todo;
    return SI.Array.set(state, index, assign({}, state[index], todo));
  },
  REMOVE_TODO_STATE: function(state, action) {
    var todo, todoId;
    todoId = action.payload.todoId;
    todo = (normalizerTodos(state)).entities.todos[todoId];
    return SI.Array.removeItem(state, todo);
  }
});

todoApp = mergeReduce({
  todos: todos
}, initialState);

module.exports = todoApp;
